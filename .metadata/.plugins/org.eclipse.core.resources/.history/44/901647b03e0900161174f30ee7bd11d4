package star.objectoriented;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Backtracking {
	ArrayList<int[]> solutions = new ArrayList<int[]>();
	public static int nodesComputed = 0;
	public ArrayList<int[]> computeNqueensSolution(int numberOfQueens){
		NqueenPuzzleBoard puzzleBoard = new NqueenPuzzleBoard(numberOfQueens);
		backtracking(numberOfQueens, 0, 0, puzzleBoard);
		return solutions;
	}
	public int backtracking(int n, int qi, int placementIndex, NqueenPuzzleBoard puzzleBoard){
		nodesComputed++;
		if(qi == n)
			System.out.println(Arrays.toString(puzzleBoard.queenPlacement));
		else if(placementIndex == n)
			backtracking(n,qi-1,0,puzzleBoard);
		else{
			if(isSafePlace(placementIndex, qi, puzzleBoard.queenPlacement)){
				puzzleBoard.queenPlacement[qi] = placementIndex;
				backtracking(n, qi+1, 0, puzzleBoard);
			}else{
				backtracking(n, qi, placementIndex + 1, puzzleBoard);
			}
		}
		return 0;
	}
	 private static boolean isSafePlace(int column, int Qi, int[] board) {
		 
		    //check for all previously placed queens
		    for (int i = 0; i < Qi; i++) {
		      if (board[i] == column) { // the ith Queen(previous) is in same column
		        return false;
		      }
		      //the ith Queen is in diagonal
		      //(r1, c1) - (r2, c1). if |r1-r2| == |c1-c2| then they are in diagonal
		      if (Math.abs(board[i] - column) == Math.abs(i - Qi)) {
		        return false;
		      }
		    }
		    return true;
		  }
		  
}
